@page "/campaigns"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using MovieCampaignTracker.Shared

<link href="css/Campaign.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<PageTitle>Campaign Dashboard</PageTitle>
<h3>Campaign</h3>

<div class="d-flex justify-content-between mb-3 flex-wrap">
    <div class="input-group w-auto me-3">
        <span class="input-group-text"><i class="fas fa-search"></i></span>
        <input type="search" class="form-control" style="width: 250px;" placeholder="Search" @bind="searchText" @bind:event="oninput" />
    </div>
    <div class="d-flex flex-wrap gap-2">
        <button class="btn btn-outline-secondary" @onclick='() => SetFilter("All")'>All</button>
        <button class="btn btn-outline-secondary" @onclick='() => SetFilter("Planned")'>Planned</button>
        <button class="btn btn-outline-success" @onclick='() => SetFilter("Ongoing")'>Ongoing</button>
        <button class="btn btn-outline-primary" @onclick='() => SetFilter("Completed")'>Completed</button>
    </div>
    <div class="mb-3 text-end">
    <button class="btn btn-success" @onclick="AddCampaign">
        <i class="fas fa-plus"></i> Add Campaign
    </button>
</div>

</div>


@if (campaigns == null)
{
    <p><em>Loading campaigns...</em></p>
}
else if (!FilteredCampaigns.Any())
{
    <p>No campaigns found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>S.No</th>
                <th>Promotional Element</th>
                <th>Duration</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (isEditing && isAdding)
            {
                @RenderEditorRow()
            }
            @foreach (var campaign in FilteredCampaigns)
            {
                <tr>
                    <td>@campaign.Campaigns.Id</td>
                    <td>@campaign.Campaigns.PromotionalElementName</td>
                    <td>
                        <div class="duration-container">
                            <div>@campaign.Campaigns.StartDate.ToString("yyyy-MM-dd") - @campaign.Campaigns.EndDate.ToString("yyyy-MM-dd")</div>
                            <div>@RenderStatusTag(campaign.Campaigns.StartDate, campaign.Campaigns.EndDate)</div>
                        </div>
                    </td>
                    <td>
                        <div class="d-flex flex-wrap gap-1">
                            @foreach (var media in campaign.MediaPlatforms)
                            {
                                <div class="media-box">
                                    <strong>@media.PlatformName</strong><br />
                                    <span>@media.NumberOfPosts posts</span>
                                </div>
                            }
                        </div>
                    </td>
                    <td>
                        @if (campaign.Campaigns.Status == "Planned")
                        {
                            <button class="btn btn-sm btn-warning me-1" @onclick="() => EditCampaign(campaign)"><i class="fas fa-pen"></i></button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteCampaign(campaign.Campaigns.Id)"><i class="fas fa-trash"></i></button>
                        }
                        else
                        {
                            <span class="text-primary">View <i class="fas fa-arrow-right"></i></span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CampaignWithMediaDto> campaigns;
    private string searchText = string.Empty;
    private string currentFilter = "All";

    private List<CampaignWithMediaDto> FilteredCampaigns => campaigns
        ?.Where(c => (string.IsNullOrEmpty(searchText) || c.Campaigns.PromotionalElementName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                  && (currentFilter == "All" || GetStatus(c.Campaigns.StartDate, c.Campaigns.EndDate) == currentFilter))
        .ToList() ?? new List<CampaignWithMediaDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<ApiResponse>("api/campaign/by-project/1");
            campaigns = response?.Campaigns ?? new List<CampaignWithMediaDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching campaigns: " + ex.Message);
            // Optionally, set an error flag and show an error message in the UI
        }
    }


    private void SetFilter(string filter)
    {
        currentFilter = filter;
    }

    private string GetStatus(DateTime start, DateTime end)
    {
        var now = DateTime.Today;
        if (now < start) return "Planned";
        if (now >= start && now <= end) return "Ongoing";
        return "Completed";
    }

    private MarkupString RenderStatusTag(DateTime start, DateTime end)
    {
        var status = GetStatus(start, end);
        var cls = status switch
        {
            "Planned" => "badge bg-secondary",
            "Ongoing" => "badge bg-success",
            _ => "badge bg-primary"
        };
        return new MarkupString($"<span class=\"{cls}\">{status}</span>");
    }

    private bool isEditing = false;
    private bool isAdding = false;
    private CampaignWithMediaDto editModel = new();
    private int? editingRowId = null;

    private void AddCampaign()
    {
        editModel = new CampaignWithMediaDto
            {
                Campaigns = new Campaigns
                {
                    StartDate = DateTime.Today,
                    EndDate = DateTime.Today.AddDays(5),
                    Status = "Planned"
                },
                MediaPlatforms = new List<MediaPlatforms>()
            };
        isAdding = true;
        isEditing = true;
        editingRowId = null;
    }

    private void EditCampaign(CampaignWithMediaDto campaign)
    {
        editModel = new CampaignWithMediaDto
            {
                Campaigns = new Campaigns
                {
                    Id = campaign.Campaigns.Id,
                    PromotionalElementName = campaign.Campaigns.PromotionalElementName,
                    StartDate = campaign.Campaigns.StartDate,
                    EndDate = campaign.Campaigns.EndDate,
                    Status = campaign.Campaigns.Status
                },
                MediaPlatforms = campaign.MediaPlatforms.Select(m => new MediaPlatforms
                {
                    PlatformName = m.PlatformName,
                    NumberOfPosts = m.NumberOfPosts
                }).ToList()
            };
        isAdding = false;
        isEditing = true;
        editingRowId = campaign.Campaigns.Id;
    }

    private void CancelEdit()
    {
        isEditing = false;
        isAdding = false;
        editingRowId = null;
        editModel = new();
    }

    private void SaveCampaign()
    {
        if (isAdding)
        {
            editModel.Campaigns.Id = campaigns.Any() ? campaigns.Max(c => c.Campaigns.Id) + 1 : 1;
            campaigns.Insert(0, editModel);
        }
        else
        {
            var existing = campaigns.FirstOrDefault(c => c.Campaigns.Id == editModel.Campaigns.Id);
            if (existing != null)
            {
                existing.Campaigns.PromotionalElementName = editModel.Campaigns.PromotionalElementName;
                existing.Campaigns.StartDate = editModel.Campaigns.StartDate;
                existing.Campaigns.EndDate = editModel.Campaigns.EndDate;
                existing.Campaigns.Status = editModel.Campaigns.Status;
                existing.MediaPlatforms = editModel.MediaPlatforms;
            }
        }

        CancelEdit();
    }



    private async Task DeleteCampaign(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this campaign?");
        if (confirmed)
        {
            await Http.DeleteAsync($"api/campaign/delete/{id}");
            campaigns = campaigns.Where(c => c.Campaigns.Id != id).ToList();
        }
    }

    RenderFragment RenderEditorRow() => __builder =>
    {
        __builder.OpenElement(0, "tr");
        __builder.AddAttribute(1, "class", "table-warning");

        __builder.OpenElement(2, "td");
        __builder.AddContent(3, isAdding ? "(new)" : editModel.Campaigns.Id.ToString());
        __builder.CloseElement();

        __builder.OpenElement(4, "td");
        __builder.OpenElement(5, "input");
        __builder.AddAttribute(6, "class", "form-control");
        __builder.AddAttribute(7, "value", BindConverter.FormatValue(editModel.Campaigns.PromotionalElementName));
        __builder.AddAttribute(8, "onchange", EventCallback.Factory.CreateBinder<string>(
    this, __value => editModel.Campaigns.PromotionalElementName = __value, editModel.Campaigns.PromotionalElementName));
        __builder.CloseElement();
        __builder.CloseElement();

        __builder.OpenElement(9, "td");
        __builder.OpenElement(10, "input");
        __builder.AddAttribute(11, "type", "date");
        __builder.AddAttribute(12, "class", "form-control");
        __builder.AddAttribute(13, "value", BindConverter.FormatValue(editModel.Campaigns.StartDate, "yyyy-MM-dd"));
        __builder.AddAttribute(14, "onchange", EventCallback.Factory.CreateBinder<DateTime>(
    this, __value => editModel.Campaigns.StartDate = __value, editModel.Campaigns.StartDate));
        __builder.CloseElement();

        __builder.OpenElement(15, "input");
        __builder.AddAttribute(16, "type", "date");
        __builder.AddAttribute(17, "class", "form-control mt-1");
        __builder.AddAttribute(18, "value", BindConverter.FormatValue(editModel.Campaigns.EndDate, "yyyy-MM-dd"));
        __builder.AddAttribute(19, "onchange", EventCallback.Factory.CreateBinder<DateTime>(
    this, __value => editModel.Campaigns.EndDate = __value, editModel.Campaigns.EndDate));
        __builder.CloseElement();
        __builder.CloseElement();

        __builder.OpenElement(20, "td");
        __builder.OpenElement(21, "select");
        __builder.AddAttribute(22, "class", "form-select");
        __builder.AddAttribute(23, "value", BindConverter.FormatValue(editModel.Campaigns.Status));
        __builder.AddAttribute(24, "onchange", EventCallback.Factory.CreateBinder<string>(
    this, __value => editModel.Campaigns.Status = __value, editModel.Campaigns.Status));
        __builder.AddContent(25,
    (RenderFragment)(__selectBuilder =>
    {
        __selectBuilder.OpenElement(26, "option");
        __selectBuilder.AddAttribute(27, "value", "Planned");
        __selectBuilder.AddContent(28, "Planned");
        __selectBuilder.CloseElement();

        __selectBuilder.OpenElement(29, "option");
        __selectBuilder.AddAttribute(30, "value", "Ongoing");
        __selectBuilder.AddContent(31, "Ongoing");
        __selectBuilder.CloseElement();

        __selectBuilder.OpenElement(32, "option");
        __selectBuilder.AddAttribute(33, "value", "Completed");
        __selectBuilder.AddContent(34, "Completed");
        __selectBuilder.CloseElement();

    }));
    __builder.CloseElement();
    __builder.CloseElement();

    __builder.OpenElement(27, "td");
    __builder.OpenElement(28, "button");
    __builder.AddAttribute(29, "class", "btn btn-sm btn-success me-1");
    __builder.AddAttribute(30, "onclick", EventCallback.Factory.Create(this, SaveCampaign));
    __builder.AddContent(31, "Save");
    __builder.CloseElement();

    __builder.OpenElement(32, "button");
    __builder.AddAttribute(33, "class", "btn btn-sm btn-secondary");
    __builder.AddAttribute(34, "onclick", EventCallback.Factory.Create(this, CancelEdit));
    __builder.AddContent(35, "Cancel");
    __builder.CloseElement();
    __builder.CloseElement();

    __builder.CloseElement(); // tr
};


    public class ApiResponse
    {
        public List<CampaignWithMediaDto> Campaigns { get; set; }
    }
}
