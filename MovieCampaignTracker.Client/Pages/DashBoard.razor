@page "/dashboard"
@inject HttpClient Http
@inject Microsoft.Extensions.Options.IOptions<MovieSettings> MovieOptions

@using MovieCampaignTracker.Shared
@using System.Globalization
<link href="css/Dashboard.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-container">
    <h1>Impressions</h1>

    <!-- Movie Info -->
    <div class="movie-info">
        <h1 class="movie-title">Thug Life</h1>
        <img src="https://stat4.bollywoodhungama.in/wp-content/uploads/2024/11/Thug-Life.jpeg" alt="Thug Life" class="movie-poster" />
    </div>

    <!-- Summary Metrics -->
    <div class="summary-metrics">
        @foreach (var metric in SummaryMetrics)
        {
            <div class="metric-box">
                <h2>
                    @if (metric.Title.Contains("View") && !metric.Title.Contains("YouTube") && !metric.Title.Contains("Twitter") && !metric.Title.Contains("Instagram") && !metric.Title.Contains("Facebook"))
                    {
                        <i class="fas fa-eye icon" style="color: #4CAF50;"></i>
                    }
                    else if (metric.Title.Contains("Like"))
                    {
                        <i class="fas fa-thumbs-up icon" style="color: #1AA7EC;"></i>
                    }
                    else if (metric.Title.Contains("Comment"))
                    {
                        <i class="fas fa-comment icon" style="color: #FFFF00;"></i>
                    }
                    else if (metric.Title.Contains("Share"))
                    {
                        <i class="fas fa-share icon" style="color: #b100cd;"></i>
                    }
                    else if (metric.Title.Contains("YouTube"))
                    {
                        <i class="fab fa-youtube icon youtube-icon"></i>
                    }
                    else if (metric.Title.Contains("Twitter"))
                    {
                        <i class="fab fa-twitter icon twitter-icon"></i>
                    }
                    else if (metric.Title.Contains("Instagram"))
                    {
                        <i class="fab fa-instagram icon instagram-icon"></i>
                    }
                    else if (metric.Title.Contains("Facebook"))
                    {
                        <i class="fab fa-facebook icon facebook-icon"></i>
                    }

                    @metric.Title
                </h2>
                <p>@metric.Value</p>
            </div>
        }
    </div>

    <!-- Daily Insights -->
    <div class="daily-section">
        <h3>
            Daily Insights
            <button @onclick="ShowOverallInsights" class="overall-btn">Overall</button>
        </h3>

        <div class="date-buttons">
            @foreach (var day in DateButtons)
            {
                <button @onclick="@(() => LoadMetricsForDate(day))" class="date-btn @(SelectedDate == day ? "selected" : "")">
                    @day.ToString("d MMM", CultureInfo.InvariantCulture)
                </button>
            }
        </div>

        @if (PaginatedEntries.Any())
        {
            <div class="bar-chart">
                @foreach (var entry in PaginatedEntries)
                {
                    var rawWidth = (entry.ViewCount / (float)MaxViewCount) * 100;
                    var normalizedWidth = Math.Clamp(rawWidth, 5, 90);
                    <div class="bar-container">
                        <div class="bar-label">@entry.TitleOrText (@entry.Platform)</div>
                        <div class="bar-wrapper">
                            <div class="bar" style="width:@normalizedWidth%"></div>
                            <div class="bar-value">@entry.ViewCount.ToString("N0") <i class="fas fa-eye icon" style="color: #4CAF50; font-size:small"></i></div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No data available for this date.</p>
        }
    </div>

    <div class="pagination-container">
        <div class="pagination">
            <button @onclick="PrevPage" disabled="@(_currentPage == 1)">
                <i class="fas fa-angle-double-left"></i>
            </button>

            @for (int i = 1; i <= _totalPages; i++)
            {
                <button @onclick="@(() => GoToPage(i))" class="page-btn @(i == _currentPage ? "selected" : "")">
                    @i
                </button>
            }

            <button @onclick="NextPage" disabled="@(_currentPage == _totalPages)">
                <i class="fas fa-angle-double-right"></i>
            </button>
        </div>
    </div>

</div>

@code {
    private List<SocialMediaMetric> AllMetrics = new();
    private List<SocialMediaMetric> DailyEntries = new();
    private List<SocialMediaMetric> PaginatedEntries = new();
    private List<DateTime> DateButtons = new();
    private DateTime SelectedDate;

    private List<(string Title, string Value)> SummaryMetrics = new();
    private int MaxViewCount = 1;

    // Pagination
    private int _currentPage = 1;
    private int _pageSize = 5;
    private int _totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        AllMetrics = await Http.GetFromJsonAsync<List<SocialMediaMetric>>("api/dashboard/all");

        DateButtons = AllMetrics
            .Select(m => m.FetchedAt.Date)
            .Distinct()
            .OrderByDescending(d => d)
            .Take(10)
            .ToList();

        SelectedDate = DateButtons.FirstOrDefault();
        await LoadMetricsForDate(SelectedDate);
    }

    private void GoToPage(int pageNumber)
    {
        _currentPage = pageNumber;
        Paginate();
    }

    private async Task LoadMetricsForDate(DateTime date)
    {
        SelectedDate = date;
        _currentPage = 1;

        DailyEntries = AllMetrics
            .Where(m => m.FetchedAt.Date == date)
            .OrderByDescending(m => m.ViewCount)
            .ToList();

        MaxViewCount = (int)(DailyEntries.Any() ? DailyEntries.Max(m => m.ViewCount) : 1);

        _totalPages = (int)Math.Ceiling(DailyEntries.Count / (double)_pageSize);
        Paginate();

        LoadSummary(date);
    }

    private void Paginate()
    {
        PaginatedEntries = DailyEntries
            .Skip((_currentPage - 1) * _pageSize)
            .Take(_pageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            Paginate();
        }
    }

    private void PrevPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            Paginate();
        }
    }

    private void LoadSummary(DateTime filterDate)
    {
        var filtered = AllMetrics.Where(m => m.FetchedAt.Date == filterDate.Date);

        var grouped = filtered
            .GroupBy(m => m.Platform)
            .Select(g => new
            {
                Platform = g.Key,
                Views = g.Sum(m => m.ViewCount),
                Likes = g.Sum(m => m.LikeCount),
                Comments = g.Sum(m => m.CommentCount),
                Shares = g.Sum(m => m.ShareCount)
            }).ToList();

        SummaryMetrics = new List<(string Title, string Value)>
        {
            ("Views", grouped.Sum(g => g.Views).ToString("N0")),
            ("Likes", grouped.Sum(g => g.Likes).ToString("N0")),
            ("Comments", grouped.Sum(g => g.Comments).ToString("N0")),
            ("Shares", grouped.Sum(g => g.Shares).ToString("N0")),
            ("YouTube", grouped.FirstOrDefault(g => g.Platform == "YouTube")?.Views.ToString("N0") ?? "0"),
            ("Twitter", grouped.FirstOrDefault(g => g.Platform == "Twitter")?.Views.ToString("N0") ?? "0"),
            ("Instagram", grouped.FirstOrDefault(g => g.Platform == "Instagram")?.Views.ToString("N0") ?? "0"),
            ("Facebook", grouped.FirstOrDefault(g => g.Platform == "Facebook")?.Views.ToString("N0") ?? "0")
        };
    }

    private async Task ShowOverallInsights()
    {
        SelectedDate = DateTime.MinValue; // Indicator that we are showing overall insights
        _currentPage = 1;

        DailyEntries = AllMetrics.OrderByDescending(m => m.ViewCount).ToList();
        MaxViewCount = (int)(DailyEntries.Any() ? DailyEntries.Max(m => m.ViewCount) : 1);

        _totalPages = (int)Math.Ceiling(DailyEntries.Count / (double)_pageSize);
        Paginate();

        LoadOverallSummary();
    }

    private void LoadOverallSummary()
    {
        var grouped = AllMetrics
            .GroupBy(m => m.Platform)
            .Select(g => new
            {
                Platform = g.Key,
                Views = g.Sum(m => m.ViewCount),
                Likes = g.Sum(m => m.LikeCount),
                Comments = g.Sum(m => m.CommentCount),
                Shares = g.Sum(m => m.ShareCount)
            }).ToList();

        SummaryMetrics = new List<(string Title, string Value)>
    {
        ("Overall Views", grouped.Sum(g => g.Views).ToString("N0")),
        ("Overall Likes", grouped.Sum(g => g.Likes).ToString("N0")),
        ("Overall Comments", grouped.Sum(g => g.Comments).ToString("N0")),
        ("Overall Shares", grouped.Sum(g => g.Shares).ToString("N0")),
        ("Overall YouTube", grouped.FirstOrDefault(g => g.Platform == "YouTube")?.Views.ToString("N0") ?? "0"),
        ("Overall Twitter", grouped.FirstOrDefault(g => g.Platform == "Twitter")?.Views.ToString("N0") ?? "0"),
        ("Overall Instagram", grouped.FirstOrDefault(g => g.Platform == "Instagram")?.Views.ToString("N0") ?? "0"),
        ("Overall Facebook", grouped.FirstOrDefault(g => g.Platform == "Facebook")?.Views.ToString("N0") ?? "0")
    };
    }
}
