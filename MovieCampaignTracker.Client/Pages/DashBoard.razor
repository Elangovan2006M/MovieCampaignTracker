@page "/impressions"
@inject HttpClient Http
@inject IConfiguration Configuration
<link rel="stylesheet" href="~/css/Dashboard.css">

@using MovieCampaignTracker.Shared;

<!-- Fetch Movie Thumbnail -->
@{
    var movieImageUrl = Configuration["Images:MoviePoster"];
}

<h1 class="fw-bold mb-1 text-dark">Dash Board</h1>
<div class="d-flex align-items-center mb-4">
    <img src="https://pbs.twimg.com/media/GmpJi9RboAABHvg?format=jpg&name=large" alt="Thug Life Poster" class="movie-poster me-3" />
    <div>
        <h3 class="fw-bold text-primary">Thug Life</h3>
    </div>
</div>
<!-- Tabs -->
<ul class="nav nav-pills mb-4">
    <li class="nav-item">
        <a class="nav-link active" href="#">Thug Life Movie Release</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="#">Thug Life All Song Release</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="#">Thug Life Trailer Release</a>
    </li>
</ul>

<!-- KPI Cards -->
<div class="row text-center mb-4">
    <div class="col metric-card">
        <h5 class="fw-bold text-success">@TotalViews</h5>
        <small>🔎 Views</small>
    </div>
    <div class="col metric-card">
        <h5 class="fw-bold text-danger">@TotalLikes</h5>
        <small>❤️ Likes</small>
    </div>
    <div class="col metric-card">
        <h5 class="fw-bold text-info">@TotalComments</h5>
        <small>💬 Comments</small>
    </div>
    <div class="col metric-card">
        <h5 class="fw-bold text-warning">@TotalShares</h5>
        <small>🔄 Shares</small>
    </div>
</div>

<!-- Date Filters -->
<div class="mb-3">
    @foreach (var date in AvailableDates)
    {
        <button class="btn btn-outline-primary date-btn me-1 mb-1" @onclick="() => FilterByDate(date)">📅 @date</button>
    }
</div>

<!-- Impression Chart List -->
<div>
    @foreach (var entry in FilteredImpressions.OrderByDescending(x => x.Views))
    {
        <div class="mb-3 impression-card">
            <div class="d-flex align-items-center">
                <img src="https://pbs.twimg.com/media/GmpJi9RboAABHvg?format=jpg&name=large" alt="Thumbnail" class="movie-image" />
                <div class="flex-grow-1">
                    <strong class="text-dark">@entry.Name</strong><br />
                    <small class="text-muted">@entry.Type</small>
                </div>
                <h5 class="text-primary fw-bold">@entry.Views</h5>
            </div>
            <div class="progress mt-2">
                <div class="progress-bar bg-success" role="progressbar" style="width: @entry.Views%"></div>
            </div>
        </div>
    }
</div>

@code {
    private List<ImpressionItem> AllImpressions = new();
    private List<ImpressionItem> FilteredImpressions = new();
    private List<string> AvailableDates = new();

    private int TotalViews, TotalLikes, TotalComments, TotalShares;

    protected override async Task OnInitializedAsync()
    {
        var yt = await Http.GetFromJsonAsync<List<YouTubeMetrics>>("/api/youtube/all");
        var tw = await Http.GetFromJsonAsync<List<TwitterMetrics>>("/api/twitter/all");

        var ytImageUrl = Configuration["Images:YouTubeThumbnail"];
        var twImageUrl = Configuration["Images:TwitterThumbnail"];

        AllImpressions = yt!.Select(x => new ImpressionItem
            {
                Name = "YouTube",
                Type = x.Title,
                Views = int.TryParse(x.ViewCount, out var v) ? v : 0,
                Date = x.FetchedAt.ToString("d MMM"),
                ImageUrl = ytImageUrl,
                LikeCount = int.Parse(x.LikeCount ?? "0"),
                CommentCount = int.Parse(x.CommentCount ?? "0")
            })
            .Concat(tw!.Select(x => new ImpressionItem
                {
                    Name = "Twitter",
                    Type = x.Text ?? "",
                    Views = x.LikeCount + x.RetweetCount,
                    Date = x.FetchedAt.ToString("d MMM"),
                    ImageUrl = twImageUrl,
                    LikeCount = x.LikeCount,
                    CommentCount = x.ReplyCount
                }))
            .ToList();

        AvailableDates = AllImpressions.Select(x => x.Date).Distinct().OrderByDescending(x => x).ToList();

        UpdateKPI();
        FilterByDate(AvailableDates.FirstOrDefault());
    }

    private void FilterByDate(string? date)
    {
        FilteredImpressions = AllImpressions
            .Where(x => x.Date == date)
            .Select(x =>
            {
                x.BarWidth = x.Views * 100 / (AllImpressions.Max(m => m.Views) + 1);
                return x;
            })
            .ToList();
    }

    private void UpdateKPI()
    {
        TotalViews = AllImpressions.Sum(x => x.Views);
        TotalLikes = AllImpressions.Sum(x => x.LikeCount);
        TotalComments = AllImpressions.Sum(x => x.CommentCount);
        TotalShares = AllImpressions.Sum(x => x.Views / 5); // Estimated share count.
    }

    public class ImpressionItem
    {
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public int Views { get; set; }
        public int BarWidth { get; set; }
        public string Date { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public int LikeCount { get; set; }
        public int CommentCount { get; set; }
    }
}