@page "/dashboard"
@inject HttpClient Http
@inject IOptions<MovieSettings> MovieOptions

@using Microsoft.Extensions.Options
@using MovieCampaignTracker.Shared
@using System.Globalization

<link rel="stylesheet" href="css/dashboard.css">

<PageTitle>Dashboard</PageTitle>

<div class="p-4 bg-white rounded-xl shadow-md grid grid-cols-4 gap-4">
    @foreach (var metric in SummaryMetrics)
    {
        <div class="bg-gray-100 rounded-xl p-4 shadow flex flex-col items-center">
            <h2 class="text-xl font-semibold">@metric.Title</h2>
            <p class="text-2xl font-bold text-red-600">@metric.Value</p>
        </div>
    }
    <div class="col-span-4 flex justify-end mt-4">
        <img src="@MovieOptions.Value.MovieImageUrl" alt="Movie" class="w-40 h-auto rounded-xl shadow-lg" />
    </div>
</div>

<div class="mt-8 bg-white rounded-xl shadow-md p-4">
    <h3 class="text-xl font-bold mb-4">Daily Insights</h3>
    <div class="flex flex-wrap gap-2 mb-4">
        @foreach (var day in DateButtons)
        {
            <button @onclick="@(() => LoadMetricsForDate(day))"
                    class="px-4 py-2 rounded-full border hover:bg-red-100 @(SelectedDate == day ? "bg-red-500 text-white" : "bg-white")">
                @day.ToString("d MMM", CultureInfo.InvariantCulture)
            </button>
        }
    </div>

    @if (DailyEntries.Any())
    {
        <div>
            @foreach (var entry in DailyEntries)
            {
                <div class="mb-2 p-2 bg-gray-100 rounded shadow-sm flex justify-between items-center">
                    <div>
                        <strong>@entry.TitleOrText</strong> (<em>@entry.Platform</em>)
                    </div>
                    <div class="text-green-600 font-semibold">@entry.ViewCount.ToString("N0") 👁</div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No data available for this date.</p>
    }
</div>

@code {
    private List<SocialMediaMetric> AllMetrics = new();
    private List<SocialMediaMetric> DailyEntries = new();
    private List<DateTime> DateButtons = new();
    private DateTime SelectedDate;

    private List<(string Title, string Value)> SummaryMetrics = new();

    protected override async Task OnInitializedAsync()
    {
        AllMetrics = await Http.GetFromJsonAsync<List<SocialMediaMetric>>("api/dashboard/all");
        DateButtons = AllMetrics.Select(m => m.FetchedAt.Date).Distinct().OrderByDescending(d => d).Take(10).ToList();

        SelectedDate = DateButtons.FirstOrDefault();
        await LoadMetricsForDate(SelectedDate);

        LoadSummary();
    }

    private async Task LoadMetricsForDate(DateTime date)
    {
        SelectedDate = date;
        DailyEntries = AllMetrics
            .Where(m => m.FetchedAt.Date == date)
            .OrderByDescending(m => m.ViewCount)
            .Take(10)
            .ToList();
    }

    private void LoadSummary()
    {
        var total = AllMetrics;

        SummaryMetrics = new List<(string Title, string Value)>
        {
            ("Total Views", total.Sum(m => m.ViewCount).ToString("N0")),
            ("Total Likes", total.Sum(m => m.LikeCount).ToString("N0")),
            ("Total Comments", total.Sum(m => m.CommentCount).ToString("N0")),
            ("Total Shares", total.Sum(m => m.ShareCount).ToString("N0")),
            ("YouTube Views", total.Where(m => m.Platform == "YouTube").Sum(m => m.ViewCount).ToString("N0")),
            ("Twitter Views", total.Where(m => m.Platform == "Twitter").Sum(m => m.ViewCount).ToString("N0")),
            ("Instagram Views", total.Where(m => m.Platform == "Instagram").Sum(m => m.ViewCount).ToString("N0")),
            ("Facebook Views", total.Where(m => m.Platform == "Facebook").Sum(m => m.ViewCount).ToString("N0")),
        };
    }
}
